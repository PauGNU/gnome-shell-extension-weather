/*
 *
 *  Weather extension for GNOME Shell preferences 
 *  - Creates a widget to set the preferences of the weather extension/
 *
 * Copyright (C) 2012
 *     Canek Pel√°ez <canek@ciencias.unam.mx>,
 *
 * This file is part of gnome-shell-extension-weather.
 *
 * gnome-shell-extension-weather is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * gnome-shell-extension-weather is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with gnome-shell-extension-weather.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

const Gio = imports.gi.Gio;
const Gtk = imports.gi.Gtk;
const GObject = imports.gi.GObject;
const Gettext = imports.gettext.domain('gnome-shell-extension');
const _ = Gettext.gettext;

const Lang = imports.lang;
const ExtensionUtils = imports.misc.extensionUtils;

const WEATHER_PREFS_UI = '@TOPEXTENSIONDIR@/weather@gnome-shell-extensions.gnome.org/prefs.xml';
const WEATHER_SETTINGS_SCHEMA = 'org.gnome.shell.extensions.weather';

const WeatherUnits = {
    CELSIUS: 0,
    FAHRENHEIT: 1
};

const WeatherWindSpeedUnits = {
    KPH: 0,
    MPH: 1,
    MPS: 2,
    KNOTS: 3
};

const WeatherPosition = {
    CENTER: 0,
    RIGHT: 1,
    LEFT: 2
};

/*
  Taken from auto-move-windows@gnome-shell-extensions.gcampax.github.com:

  http://git.gnome.org/gnome-shell-extensions
 */
function getSettings(schema) {
    let extension = ExtensionUtils.getCurrentExtension();

    schema = schema || extension.metadata['settings-schema'];

    const GioSSS = Gio.SettingsSchemaSource;

    // check if this extension was built with "make zip-file", and thus
    // has the schema files in a subfolder
    // otherwise assume that extension has been installed in the
    // same prefix as gnome-shell (and therefore schemas are available
    // in the standard folders)
    let schemaDir = extension.dir.get_child('schemas');
    let schemaSource;
    if (schemaDir.query_exists(null))
        schemaSource = GioSSS.new_from_directory(schemaDir.get_path(),
                                                 GioSSS.get_default(),
                                                 false);
    else
        schemaSource = GioSSS.get_default();

    let schemaObj = schemaSource.lookup(schema, true);
    if (!schemaObj)
        throw new Error('Schema ' + schema + ' could not be found for extension '
                        + extension.metadata.uuid + '. Please check your installation.');

    return new Gio.Settings({ settings_schema: schemaObj });
}

function getErrorLabel(message) {
    let label = new Gtk.Label();
    label.set_text(message);
    return label;
}

function positionFromString(s) {
    if (s == 'left')
	return WeatherPosition.LEFT;
    if (s == 'center')
	return WeatherPosition.CENTER;
    return WeatherPosition.RIGHT;
}

function tempUnitFromString(s) {
    if (s == 'celsius')
	return WeatherUnits.CELSIUS;
    return WeatherUnits.FAHRENHEIT;
}

function windUnitFromString(s) {
    if (s == 'kph')
	return WeatherWindSpeedUnits.KPH;
    if (s == 'mph')
	return WeatherWindSpeedUnits.MPH;
    if (s == 'm/s')
	return WeatherWindSpeedUnits.MPS;
    return KNOTS;
}

function positionToString(pos) {
    switch (pos) {
    case WeatherPosition.LEFT:
	return 'left';
    case WeatherPosition.CENTER:
	return 'center';
    case WeatherPosition.RIGHT:
	return 'right';
    }
    return 'left';
}

function temperatureUnitToString(unit) {
    switch (unit) {
    case WeatherUnits.CELSIUS:
	return 'celsius';
    case WeatherUnits.FAHRENHEIT:
	return 'fahrenheit';
    }
    return 'celsius';
}

function windSpeedUnitToString(unit) {
    switch (unit) {
    case WeatherWindSpeedUnits.KPH:
	return'kph';
    case WeatherWindSpeedUnits.MPH:
	return'mph';
    case WeatherWindSpeedUnits.MPS:
	return'm/s';
    case WeatherWindSpeedUnits.KNOTS:
	return'knots';
    }
    return'kph';
}

const Widget = new GObject.Class({
    Name: 'WeatherExtension.Prefs.Widget',
    GTypeName: 'WeatherExtensionPrefsWidget',
    Extends: Gtk.Box,

    _init: function(params) {
	this.parent(params);
	try {
	    this._settings = getSettings(WEATHER_SETTINGS_SCHEMA);
	} catch (e) {
	    this.add(getErrorLabel(_('Schema ' + WEATHER_SETTINGS_SCHEMA + ' not found.')));
	    return;	    
	}
	let builder = new Gtk.Builder();
	try {
	    builder.add_from_file(WEATHER_PREFS_UI);
	} catch (e) {
	    this.add(getErrorLabel(_('Could not load glade "' + WEATHER_PREFS_UI + '" not found.')));
	    return;
	}
	this._topBox = builder.get_object('weather_top_box');
	this._fillData(builder);
	this._connectSignals(builder);
	this.add(this._topBox);
    },

    _fillData: function(builder) {
	this._city_entry = builder.get_object('city_entry');
	this._city_entry.set_text(this._settings.get_string('city'));
	this._include_condition_checkbutton =
	    builder.get_object('include_condition_checkbutton');
	let b = this._settings.get_boolean('show-comment-in-panel')
	this._include_condition_checkbutton.set_active(b);
	this._position_combobox = builder.get_object('position_combobox');
	let s = this._settings.get_string('position-in-panel');
	this._position_combobox.set_active(positionFromString(s));
	this._sunrise_times_checkbutton  = builder.get_object('sunrise_times_checkbutton');
	this._sunrise_times_checkbutton.set_active(this._settings.get_boolean('show-sunrise-sunset'));
	this._show_text_checkbutton  = builder.get_object('show_text_checkbutton');
	this._show_text_checkbutton.set_active(this._settings.get_boolean('show-text-in-panel'));
	this._translate_conditions_checkbutton  =
	    builder.get_object('translate_conditions_checkbutton');
	b = this._settings.get_boolean('translate-condition');
	this._translate_conditions_checkbutton.set_active(b);
	this._temperature_unit_combobox = builder.get_object('temperature_unit_combobox');
	s = this._settings.get_string('unit');
	this._temperature_unit_combobox.set_active(tempUnitFromString(s));
	this._symbolic_icons_checkbutton = builder.get_object('symbolic_icons_checkbutton');
	this._symbolic_icons_checkbutton.set_active(this._settings.get_boolean('use-symbolic-icons'));
	this._wind_speed_unit_combobox = builder.get_object('wind_speed_unit_combobox');
	s = this._settings.get_string('wind-speed-unit');
	this._wind_speed_unit_combobox.set_active(windUnitFromString(s));
	this._woeid_entry = builder.get_object('woeid_entry');
	this._woeid_entry.set_text(this._settings.get_string('woeid'));
    },

    _connectSignals: function(builder) {
	this._city_entry.connect('changed', Lang.bind(this, function() {
	    this._settings.set_string('city', this._city_entry.get_text());
	}));
	this._include_condition_checkbutton.connect('toggled', Lang.bind(this, function() {
	    let b = this._include_condition_checkbutton.get_active();
	    this._settings.set_boolean('show-comment-in-panel', b);
	}));
	this._position_combobox.connect('changed', Lang.bind(this, function() {
	    let s = positionToString(this._position_combobox.get_active());
	    this._settings.set_string('position-in-panel', s);
	}));
	this._sunrise_times_checkbutton.connect('toggled', Lang.bind(this, function() {
	    let b = this._sunrise_times_checkbutton.get_active();
	    this._settings.set_boolean('show-sunrise-sunset', b);
	}));
	this._show_text_checkbutton.connect('toggled', Lang.bind(this, function() {
	    let b = this._show_text_checkbutton.get_active();
	    this._settings.set_boolean('show-text-in-panel', b);
	}));
	this._translate_conditions_checkbutton.connect('toggled', Lang.bind(this, function() {
	    let b = this._translate_conditions_checkbutton.get_active();
	    this._settings.set_boolean('translate-condition', b);
	}));
	this._temperature_unit_combobox.connect('changed', Lang.bind(this, function() {
	    let s = temperatureUnitToString(this._temperature_unit_combobox.get_active());
	    this._settings.set_string('unit', s);
	}));
	this._symbolic_icons_checkbutton.connect('toggled', Lang.bind(this, function() {
	    let b = this._symbolic_icons_checkbutton.get_active();
	    this._settings.set_boolean('use-symbolic-icons', b);
	}));
	this._wind_speed_unit_combobox.connect('changed', Lang.bind(this, function() {
	    let s = windSpeedUnitToString(this._wind_speed_unit_combobox.get_active());
	    this._settings.set_string('wind-speed-unit', s);
	}));
	this._woeid_entry.connect('changed', Lang.bind(this, function() {
	    this._settings.set_string('woeid', this._woeid_entry.get_text());
	}));
    }
});

function init() {
}

function buildPrefsWidget() {
    let widget = new Widget();
    widget.show_all();
    return widget;
}
